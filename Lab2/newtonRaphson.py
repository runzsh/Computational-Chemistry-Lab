# -*- coding: utf-8 -*-
"""
newtonRaphson.ipynb

Author: Nishant Yadav
ID: 19CY20025
Created on: 29/08/2022

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x0WV5fjlzB2mf-qH0OAgbFhKmZSTGUIz
"""

import random
import numpy as np
import matplotlib.pyplot as plt


# Defining a function for root findint
def newtonsMethod(f, diff, x0, tol, nmax):
    i = 0
    while i < nmax:
        x1 = x0 - f(x0)/diff(x0)
        if abs(x1 - x0) < tol:
            print('tolerance reached in', i+1, 'iterations')
            break
        x0 = x1
        i += 1
    
    if abs(x1 - x0) > tol:
        print("!!max iterations reached before tolerance is met!!")
    return x1


# Using random number as seed to the method
def newtonRaphson(f, diff):
    # f - function whose roots are to be calculated
    # diff - derivative of f(x)

    # Defining initial value randomly
    x0 = random.randint(-2e9, 2e9)

    # Iterating 
    while True:
        x1 = x0 - f(x0)/diff(x0)
        if (abs(x1 - x0) <= 1e-7):
            break
        x0 = x1
    
    return x1


# Testing the method for func(x) = x^3
def func(x):
    return x**3
def funcdiff(x):
    return 3*(x**2)
print("The root of function func(x) = x^3 is: {:.9f}".format(newtonRaphson(func, funcdiff)))


# Testing the method for f(x) = 1/2 - exp(-x)
def f(x):
    return (1/2) - np.exp(-x)

# Plotting the function to visualize root of f(x) = 1/2 - exp(-x)
x = np.linspace(0, 4, 100)
y = f(x)
plt.plot(x, y)
plt.axhline(0, color = 'r', ls = '--')
# plt.show()

def fdiff(x):
    return np.exp(-x)


xzero1 = newtonsMethod(f, fdiff, 1, 1e-6, 3)
print("The root of function f(x) = 1/2 - exp(-x) is: {:.9f}".format(xzero1))
