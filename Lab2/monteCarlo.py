# -*- coding: utf-8 -*-
"""
monteCarlo.ipynb

Author : Nishant Yadav
ID : 19CY20025
Created on : 28/08/2022

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w2zoNxk6Mq6xkir0zNjnAz9gAr1Or4IS
"""

import numpy as np
import matplotlib.pyplot as plt

# defining the function to integrate, here f(x) = sin(x)
def f(x):
    return np.sin(x)

# defining the function for monte carlo integration
def definite_integral_show(f, x0, x1, N):
    """
    Approximate the definite integral of f(x)dx between bounds x0 and x1 using
    N random points

    Arguements passed:
    f -- a function of one variable
    N -- number of random points to use

    """

    # First we are calculating fmax in the range x0 to x1
    # We do it by evaluating f(x) on a grid of points between x0 and x1
    # Here we are assuming the function is differentiable throughout the interval
    x = np.arange(x0, x1, 0.001)
    y = f(x)
    f_max = max(y)


    # Generating Random points:
    # x0 <= x <= x1
    # Creating random points between 0 and 1, then multiplying it with x1-x0 and adding with x0
    # 0 <= y <= f_max
    x_rand = x0 + np.random.random(N)*(x1 - x0)
    y_rand = 0 + np.random.random(N)*f_max


    # Categorizing points between below the curve or above the curve
    ind_below = np.where(y_rand < f(x_rand))
    ind_above = np.where(y_rand >= f(x_rand))


    # Ploting the Result
    plt.plot(x, y, color = "red")
    pts_below = plt.scatter(x_rand[ind_below], y_rand[ind_below], color = "green")
    pts_above = plt.scatter(x_rand[ind_above], y_rand[ind_above], color = "blue")
    plt.legend((pts_below, pts_above), ('Pts below the curve', 'Pts above the curve'), loc = 'lower left', ncol = 3, fontsize = 8)
    plt.show()


    # Printing the Result
    print("Number of points above the curve:", len(ind_above[0]))
    print("Number of points below the curve:", len(ind_below[0]))
    print("N.below/N.total:", len(ind_below[0])/N)
    print("Rectangle area:", f_max*(x1-x0))
    print("Area under the curve:", f_max*(x1-x0)*len(ind_below[0])/N)

# Running monte carlo integration on sin(x)dx from x0 = 0 to x1 = pi/2, with 1000 monte carlo steps
definite_integral_show(f, 0, np.pi/2, 1000)