# -*- coding: utf-8 -*-
"""
monteCarlo.ipynb

Author : Nishant Yadav
ID : 19CY20025
Created on : 28/08/2022

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w2zoNxk6Mq6xkir0zNjnAz9gAr1Or4IS
"""

import numpy as np
import matplotlib.pyplot as plt

def definite_integral(f, x0, x1, N):
    """
    Approximate the definite integral of f(x)dx between bounds x0 and x1 using
    N random points

    Arguements passed:
    f -- a function of one variable
    N -- number of random points to use
    
    """

    # First we are calculating fmax in the range x0 to x1
    # We do it by evaluating f(x) on a grid of points between x0 and x1
    # Here we are assuming the function is differentiable throughout the interval
    x = np.arange(x0, x1, 0.001)
    y = f(x)
    f_max = max(y)


    # Generating Random points:
    # x0 <= x <= x1
    # Creating random points between 0 and 1, then multiplying it with x1-x0 and adding with x0
    # 0 <= y <= f_max
    x_rand = x0 + np.random.random(N)*(x1 - x0)
    y_rand = 0 + np.random.random(N)*f_max


    # Categorizing points between below the curve or above the curve
    ind_below = np.where(y_rand < f(x_rand))
    ind_above = np.where(y_rand >= f(x_rand))


    # Returning the Result
    return f_max*(x1-x0)*len(ind_below[0])/N

# Calculating Monte Carlo for 1000 times
n = 1000
def f(x):
    return np.sin(x)

a = np.zeros(1000, np.float64)
for i in range(n):
    a[i] = definite_integral(f, 0, np.pi/2, 1000)

# Calculating mathematical pointers
mean = np.mean(a)
median = np.median(a)
std_dev = np.std(a)

# Calculating Mean Absolute Error Explicitly
mae = 0
for i in range(1000):
    mae = mae + abs(a[i] - 1)
mae = mae/1000

print("Mean: ", mean)
print("Median: ", median)
print("Standard Deviation: ", std_dev)
print("Mean Absolute Error: ", mae)

# Creating 2D array to create a scatter plot
arr = np.arange(0, 1000, 1)
arr = np.vstack((arr, a)).T

# Plotting using matplotlib.pyplot
marker_size = 8
plt.scatter(arr[:,0], arr[:,1], marker_size, c = 'r')
plt.title("Monte Carlo Integration of sin(x)dx")
plt.xlabel("Iteration")
plt.ylabel("Predicted Value")
plt.show()